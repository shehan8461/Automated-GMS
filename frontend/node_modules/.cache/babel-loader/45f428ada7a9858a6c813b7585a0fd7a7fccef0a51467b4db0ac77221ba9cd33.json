{"ast":null,"code":"/*\r\n\tBased on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>\r\n\thttp://www.phpied.com/rgb-color-parser-in-javascript/\r\n*/\n\nmodule.exports = function (color_string) {\n  this.ok = false;\n  this.alpha = 1.0;\n\n  // strip any leading #\n  if (color_string.charAt(0) == '#') {\n    // remove # if any\n    color_string = color_string.substr(1, 6);\n  }\n  color_string = color_string.replace(/ /g, '');\n  color_string = color_string.toLowerCase();\n\n  // before getting into regexps, try simple matches\n  // and overwrite the input\n  var simple_colors = {\n    aliceblue: 'f0f8ff',\n    antiquewhite: 'faebd7',\n    aqua: '00ffff',\n    aquamarine: '7fffd4',\n    azure: 'f0ffff',\n    beige: 'f5f5dc',\n    bisque: 'ffe4c4',\n    black: '000000',\n    blanchedalmond: 'ffebcd',\n    blue: '0000ff',\n    blueviolet: '8a2be2',\n    brown: 'a52a2a',\n    burlywood: 'deb887',\n    cadetblue: '5f9ea0',\n    chartreuse: '7fff00',\n    chocolate: 'd2691e',\n    coral: 'ff7f50',\n    cornflowerblue: '6495ed',\n    cornsilk: 'fff8dc',\n    crimson: 'dc143c',\n    cyan: '00ffff',\n    darkblue: '00008b',\n    darkcyan: '008b8b',\n    darkgoldenrod: 'b8860b',\n    darkgray: 'a9a9a9',\n    darkgreen: '006400',\n    darkkhaki: 'bdb76b',\n    darkmagenta: '8b008b',\n    darkolivegreen: '556b2f',\n    darkorange: 'ff8c00',\n    darkorchid: '9932cc',\n    darkred: '8b0000',\n    darksalmon: 'e9967a',\n    darkseagreen: '8fbc8f',\n    darkslateblue: '483d8b',\n    darkslategray: '2f4f4f',\n    darkturquoise: '00ced1',\n    darkviolet: '9400d3',\n    deeppink: 'ff1493',\n    deepskyblue: '00bfff',\n    dimgray: '696969',\n    dodgerblue: '1e90ff',\n    feldspar: 'd19275',\n    firebrick: 'b22222',\n    floralwhite: 'fffaf0',\n    forestgreen: '228b22',\n    fuchsia: 'ff00ff',\n    gainsboro: 'dcdcdc',\n    ghostwhite: 'f8f8ff',\n    gold: 'ffd700',\n    goldenrod: 'daa520',\n    gray: '808080',\n    green: '008000',\n    greenyellow: 'adff2f',\n    honeydew: 'f0fff0',\n    hotpink: 'ff69b4',\n    indianred: 'cd5c5c',\n    indigo: '4b0082',\n    ivory: 'fffff0',\n    khaki: 'f0e68c',\n    lavender: 'e6e6fa',\n    lavenderblush: 'fff0f5',\n    lawngreen: '7cfc00',\n    lemonchiffon: 'fffacd',\n    lightblue: 'add8e6',\n    lightcoral: 'f08080',\n    lightcyan: 'e0ffff',\n    lightgoldenrodyellow: 'fafad2',\n    lightgrey: 'd3d3d3',\n    lightgreen: '90ee90',\n    lightpink: 'ffb6c1',\n    lightsalmon: 'ffa07a',\n    lightseagreen: '20b2aa',\n    lightskyblue: '87cefa',\n    lightslateblue: '8470ff',\n    lightslategray: '778899',\n    lightsteelblue: 'b0c4de',\n    lightyellow: 'ffffe0',\n    lime: '00ff00',\n    limegreen: '32cd32',\n    linen: 'faf0e6',\n    magenta: 'ff00ff',\n    maroon: '800000',\n    mediumaquamarine: '66cdaa',\n    mediumblue: '0000cd',\n    mediumorchid: 'ba55d3',\n    mediumpurple: '9370d8',\n    mediumseagreen: '3cb371',\n    mediumslateblue: '7b68ee',\n    mediumspringgreen: '00fa9a',\n    mediumturquoise: '48d1cc',\n    mediumvioletred: 'c71585',\n    midnightblue: '191970',\n    mintcream: 'f5fffa',\n    mistyrose: 'ffe4e1',\n    moccasin: 'ffe4b5',\n    navajowhite: 'ffdead',\n    navy: '000080',\n    oldlace: 'fdf5e6',\n    olive: '808000',\n    olivedrab: '6b8e23',\n    orange: 'ffa500',\n    orangered: 'ff4500',\n    orchid: 'da70d6',\n    palegoldenrod: 'eee8aa',\n    palegreen: '98fb98',\n    paleturquoise: 'afeeee',\n    palevioletred: 'd87093',\n    papayawhip: 'ffefd5',\n    peachpuff: 'ffdab9',\n    peru: 'cd853f',\n    pink: 'ffc0cb',\n    plum: 'dda0dd',\n    powderblue: 'b0e0e6',\n    purple: '800080',\n    rebeccapurple: '663399',\n    red: 'ff0000',\n    rosybrown: 'bc8f8f',\n    royalblue: '4169e1',\n    saddlebrown: '8b4513',\n    salmon: 'fa8072',\n    sandybrown: 'f4a460',\n    seagreen: '2e8b57',\n    seashell: 'fff5ee',\n    sienna: 'a0522d',\n    silver: 'c0c0c0',\n    skyblue: '87ceeb',\n    slateblue: '6a5acd',\n    slategray: '708090',\n    snow: 'fffafa',\n    springgreen: '00ff7f',\n    steelblue: '4682b4',\n    tan: 'd2b48c',\n    teal: '008080',\n    thistle: 'd8bfd8',\n    tomato: 'ff6347',\n    turquoise: '40e0d0',\n    violet: 'ee82ee',\n    violetred: 'd02090',\n    wheat: 'f5deb3',\n    white: 'ffffff',\n    whitesmoke: 'f5f5f5',\n    yellow: 'ffff00',\n    yellowgreen: '9acd32'\n  };\n  color_string = simple_colors[color_string] || color_string;\n  // emd of simple type-in colors\n\n  // array of color definition objects\n  var color_defs = [{\n    re: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*((?:\\d?\\.)?\\d)\\)$/,\n    example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],\n    process: function (bits) {\n      return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]), parseFloat(bits[4])];\n    }\n  }, {\n    re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n    example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\n    process: function (bits) {\n      return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];\n    }\n  }, {\n    re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    example: ['#00ff00', '336699'],\n    process: function (bits) {\n      return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];\n    }\n  }, {\n    re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    example: ['#fb0', 'f0f'],\n    process: function (bits) {\n      return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];\n    }\n  }];\n\n  // search through the definitions to find a match\n  for (var i = 0; i < color_defs.length; i++) {\n    var re = color_defs[i].re;\n    var processor = color_defs[i].process;\n    var bits = re.exec(color_string);\n    if (bits) {\n      var channels = processor(bits);\n      this.r = channels[0];\n      this.g = channels[1];\n      this.b = channels[2];\n      if (channels.length > 3) {\n        this.alpha = channels[3];\n      }\n      this.ok = true;\n    }\n  }\n\n  // validate/cleanup values\n  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;\n  this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;\n  this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;\n  this.alpha = this.alpha < 0 ? 0 : this.alpha > 1.0 || isNaN(this.alpha) ? 1.0 : this.alpha;\n\n  // some getters\n  this.toRGB = function () {\n    return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\n  };\n  this.toRGBA = function () {\n    return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';\n  };\n  this.toHex = function () {\n    var r = this.r.toString(16);\n    var g = this.g.toString(16);\n    var b = this.b.toString(16);\n    if (r.length == 1) r = '0' + r;\n    if (g.length == 1) g = '0' + g;\n    if (b.length == 1) b = '0' + b;\n    return '#' + r + g + b;\n  };\n\n  // help\n  this.getHelpXML = function () {\n    var examples = new Array();\n    // add regexps\n    for (var i = 0; i < color_defs.length; i++) {\n      var example = color_defs[i].example;\n      for (var j = 0; j < example.length; j++) {\n        examples[examples.length] = example[j];\n      }\n    }\n    // add type-in colors\n    for (var sc in simple_colors) {\n      examples[examples.length] = sc;\n    }\n    var xml = document.createElement('ul');\n    xml.setAttribute('id', 'rgbcolor-examples');\n    for (var i = 0; i < examples.length; i++) {\n      try {\n        var list_item = document.createElement('li');\n        var list_color = new RGBColor(examples[i]);\n        var example_div = document.createElement('div');\n        example_div.style.cssText = 'margin: 3px; ' + 'border: 1px solid black; ' + 'background:' + list_color.toHex() + '; ' + 'color:' + list_color.toHex();\n        example_div.appendChild(document.createTextNode('test'));\n        var list_item_value = document.createTextNode(' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex());\n        list_item.appendChild(example_div);\n        list_item.appendChild(list_item_value);\n        xml.appendChild(list_item);\n      } catch (e) {}\n    }\n    return xml;\n  };\n};","map":{"version":3,"names":["module","exports","color_string","ok","alpha","charAt","substr","replace","toLowerCase","simple_colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","feldspar","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslateblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","violetred","wheat","white","whitesmoke","yellow","yellowgreen","color_defs","re","example","process","bits","parseInt","parseFloat","i","length","processor","exec","channels","r","g","b","isNaN","toRGB","toRGBA","toHex","toString","getHelpXML","examples","Array","j","sc","xml","document","createElement","setAttribute","list_item","list_color","RGBColor","example_div","style","cssText","appendChild","createTextNode","list_item_value","e"],"sources":["C:/Users/Shehan/Automated_Garment_Management/frontend/node_modules/rgbcolor/index.js"],"sourcesContent":["/*\r\n\tBased on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>\r\n\thttp://www.phpied.com/rgb-color-parser-in-javascript/\r\n*/\r\n\r\nmodule.exports = function(color_string) {\r\n    this.ok = false;\r\n    this.alpha = 1.0;\r\n\r\n    // strip any leading #\r\n    if (color_string.charAt(0) == '#') { // remove # if any\r\n        color_string = color_string.substr(1,6);\r\n    }\r\n\r\n    color_string = color_string.replace(/ /g,'');\r\n    color_string = color_string.toLowerCase();\r\n\r\n    // before getting into regexps, try simple matches\r\n    // and overwrite the input\r\n    var simple_colors = {\r\n        aliceblue: 'f0f8ff',\r\n        antiquewhite: 'faebd7',\r\n        aqua: '00ffff',\r\n        aquamarine: '7fffd4',\r\n        azure: 'f0ffff',\r\n        beige: 'f5f5dc',\r\n        bisque: 'ffe4c4',\r\n        black: '000000',\r\n        blanchedalmond: 'ffebcd',\r\n        blue: '0000ff',\r\n        blueviolet: '8a2be2',\r\n        brown: 'a52a2a',\r\n        burlywood: 'deb887',\r\n        cadetblue: '5f9ea0',\r\n        chartreuse: '7fff00',\r\n        chocolate: 'd2691e',\r\n        coral: 'ff7f50',\r\n        cornflowerblue: '6495ed',\r\n        cornsilk: 'fff8dc',\r\n        crimson: 'dc143c',\r\n        cyan: '00ffff',\r\n        darkblue: '00008b',\r\n        darkcyan: '008b8b',\r\n        darkgoldenrod: 'b8860b',\r\n        darkgray: 'a9a9a9',\r\n        darkgreen: '006400',\r\n        darkkhaki: 'bdb76b',\r\n        darkmagenta: '8b008b',\r\n        darkolivegreen: '556b2f',\r\n        darkorange: 'ff8c00',\r\n        darkorchid: '9932cc',\r\n        darkred: '8b0000',\r\n        darksalmon: 'e9967a',\r\n        darkseagreen: '8fbc8f',\r\n        darkslateblue: '483d8b',\r\n        darkslategray: '2f4f4f',\r\n        darkturquoise: '00ced1',\r\n        darkviolet: '9400d3',\r\n        deeppink: 'ff1493',\r\n        deepskyblue: '00bfff',\r\n        dimgray: '696969',\r\n        dodgerblue: '1e90ff',\r\n        feldspar: 'd19275',\r\n        firebrick: 'b22222',\r\n        floralwhite: 'fffaf0',\r\n        forestgreen: '228b22',\r\n        fuchsia: 'ff00ff',\r\n        gainsboro: 'dcdcdc',\r\n        ghostwhite: 'f8f8ff',\r\n        gold: 'ffd700',\r\n        goldenrod: 'daa520',\r\n        gray: '808080',\r\n        green: '008000',\r\n        greenyellow: 'adff2f',\r\n        honeydew: 'f0fff0',\r\n        hotpink: 'ff69b4',\r\n        indianred : 'cd5c5c',\r\n        indigo : '4b0082',\r\n        ivory: 'fffff0',\r\n        khaki: 'f0e68c',\r\n        lavender: 'e6e6fa',\r\n        lavenderblush: 'fff0f5',\r\n        lawngreen: '7cfc00',\r\n        lemonchiffon: 'fffacd',\r\n        lightblue: 'add8e6',\r\n        lightcoral: 'f08080',\r\n        lightcyan: 'e0ffff',\r\n        lightgoldenrodyellow: 'fafad2',\r\n        lightgrey: 'd3d3d3',\r\n        lightgreen: '90ee90',\r\n        lightpink: 'ffb6c1',\r\n        lightsalmon: 'ffa07a',\r\n        lightseagreen: '20b2aa',\r\n        lightskyblue: '87cefa',\r\n        lightslateblue: '8470ff',\r\n        lightslategray: '778899',\r\n        lightsteelblue: 'b0c4de',\r\n        lightyellow: 'ffffe0',\r\n        lime: '00ff00',\r\n        limegreen: '32cd32',\r\n        linen: 'faf0e6',\r\n        magenta: 'ff00ff',\r\n        maroon: '800000',\r\n        mediumaquamarine: '66cdaa',\r\n        mediumblue: '0000cd',\r\n        mediumorchid: 'ba55d3',\r\n        mediumpurple: '9370d8',\r\n        mediumseagreen: '3cb371',\r\n        mediumslateblue: '7b68ee',\r\n        mediumspringgreen: '00fa9a',\r\n        mediumturquoise: '48d1cc',\r\n        mediumvioletred: 'c71585',\r\n        midnightblue: '191970',\r\n        mintcream: 'f5fffa',\r\n        mistyrose: 'ffe4e1',\r\n        moccasin: 'ffe4b5',\r\n        navajowhite: 'ffdead',\r\n        navy: '000080',\r\n        oldlace: 'fdf5e6',\r\n        olive: '808000',\r\n        olivedrab: '6b8e23',\r\n        orange: 'ffa500',\r\n        orangered: 'ff4500',\r\n        orchid: 'da70d6',\r\n        palegoldenrod: 'eee8aa',\r\n        palegreen: '98fb98',\r\n        paleturquoise: 'afeeee',\r\n        palevioletred: 'd87093',\r\n        papayawhip: 'ffefd5',\r\n        peachpuff: 'ffdab9',\r\n        peru: 'cd853f',\r\n        pink: 'ffc0cb',\r\n        plum: 'dda0dd',\r\n        powderblue: 'b0e0e6',\r\n        purple: '800080',\r\n        rebeccapurple: '663399',\r\n        red: 'ff0000',\r\n        rosybrown: 'bc8f8f',\r\n        royalblue: '4169e1',\r\n        saddlebrown: '8b4513',\r\n        salmon: 'fa8072',\r\n        sandybrown: 'f4a460',\r\n        seagreen: '2e8b57',\r\n        seashell: 'fff5ee',\r\n        sienna: 'a0522d',\r\n        silver: 'c0c0c0',\r\n        skyblue: '87ceeb',\r\n        slateblue: '6a5acd',\r\n        slategray: '708090',\r\n        snow: 'fffafa',\r\n        springgreen: '00ff7f',\r\n        steelblue: '4682b4',\r\n        tan: 'd2b48c',\r\n        teal: '008080',\r\n        thistle: 'd8bfd8',\r\n        tomato: 'ff6347',\r\n        turquoise: '40e0d0',\r\n        violet: 'ee82ee',\r\n        violetred: 'd02090',\r\n        wheat: 'f5deb3',\r\n        white: 'ffffff',\r\n        whitesmoke: 'f5f5f5',\r\n        yellow: 'ffff00',\r\n        yellowgreen: '9acd32'\r\n    };\r\n    color_string = simple_colors[color_string] || color_string;\r\n    // emd of simple type-in colors\r\n\r\n    // array of color definition objects\r\n    var color_defs = [\r\n        {\r\n            re: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*((?:\\d?\\.)?\\d)\\)$/,\r\n            example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1]),\r\n                    parseInt(bits[2]),\r\n                    parseInt(bits[3]),\r\n                    parseFloat(bits[4])\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\r\n            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1]),\r\n                    parseInt(bits[2]),\r\n                    parseInt(bits[3])\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            example: ['#00ff00', '336699'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1], 16),\r\n                    parseInt(bits[2], 16),\r\n                    parseInt(bits[3], 16)\r\n                ];\r\n            }\r\n        },\r\n        {\r\n            re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            example: ['#fb0', 'f0f'],\r\n            process: function (bits){\r\n                return [\r\n                    parseInt(bits[1] + bits[1], 16),\r\n                    parseInt(bits[2] + bits[2], 16),\r\n                    parseInt(bits[3] + bits[3], 16)\r\n                ];\r\n            }\r\n        }\r\n    ];\r\n\r\n    // search through the definitions to find a match\r\n    for (var i = 0; i < color_defs.length; i++) {\r\n        var re = color_defs[i].re;\r\n        var processor = color_defs[i].process;\r\n        var bits = re.exec(color_string);\r\n        if (bits) {\r\n            var channels = processor(bits);\r\n            this.r = channels[0];\r\n            this.g = channels[1];\r\n            this.b = channels[2];\r\n            if (channels.length > 3) {\r\n                this.alpha = channels[3];\r\n            }\r\n            this.ok = true;\r\n        }\r\n\r\n    }\r\n\r\n    // validate/cleanup values\r\n    this.r = (this.r < 0 || isNaN(this.r)) ? 0 : ((this.r > 255) ? 255 : this.r);\r\n    this.g = (this.g < 0 || isNaN(this.g)) ? 0 : ((this.g > 255) ? 255 : this.g);\r\n    this.b = (this.b < 0 || isNaN(this.b)) ? 0 : ((this.b > 255) ? 255 : this.b);\r\n    this.alpha = (this.alpha < 0) ? 0 : ((this.alpha > 1.0 || isNaN(this.alpha)) ? 1.0 : this.alpha);\r\n\r\n    // some getters\r\n    this.toRGB = function () {\r\n        return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\r\n    }\r\n    this.toRGBA = function () {\r\n        return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';\r\n    }\r\n    this.toHex = function () {\r\n        var r = this.r.toString(16);\r\n        var g = this.g.toString(16);\r\n        var b = this.b.toString(16);\r\n        if (r.length == 1) r = '0' + r;\r\n        if (g.length == 1) g = '0' + g;\r\n        if (b.length == 1) b = '0' + b;\r\n        return '#' + r + g + b;\r\n    }\r\n\r\n    // help\r\n    this.getHelpXML = function () {\r\n\r\n        var examples = new Array();\r\n        // add regexps\r\n        for (var i = 0; i < color_defs.length; i++) {\r\n            var example = color_defs[i].example;\r\n            for (var j = 0; j < example.length; j++) {\r\n                examples[examples.length] = example[j];\r\n            }\r\n        }\r\n        // add type-in colors\r\n        for (var sc in simple_colors) {\r\n            examples[examples.length] = sc;\r\n        }\r\n\r\n        var xml = document.createElement('ul');\r\n        xml.setAttribute('id', 'rgbcolor-examples');\r\n        for (var i = 0; i < examples.length; i++) {\r\n            try {\r\n                var list_item = document.createElement('li');\r\n                var list_color = new RGBColor(examples[i]);\r\n                var example_div = document.createElement('div');\r\n                example_div.style.cssText =\r\n                        'margin: 3px; '\r\n                        + 'border: 1px solid black; '\r\n                        + 'background:' + list_color.toHex() + '; '\r\n                        + 'color:' + list_color.toHex()\r\n                ;\r\n                example_div.appendChild(document.createTextNode('test'));\r\n                var list_item_value = document.createTextNode(\r\n                    ' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex()\r\n                );\r\n                list_item.appendChild(example_div);\r\n                list_item.appendChild(list_item_value);\r\n                xml.appendChild(list_item);\r\n\r\n            } catch(e){}\r\n        }\r\n        return xml;\r\n\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}